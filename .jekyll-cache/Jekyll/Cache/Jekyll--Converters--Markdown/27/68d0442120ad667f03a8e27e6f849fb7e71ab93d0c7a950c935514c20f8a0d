I"1
<h1 id="gsoc-2020-project-ideas">GSoC 2020 Project Ideas</h1>

<p>This page lists project ideas for GSoC 2020. It is recommended to go through the below
list of ideas if you are willing to participate in GSoC 2020 with LazyWolves.</p>

<h2 id="auto-registration-of-backends-with-elasticpyproxy-using-agents">Auto registration of backends with ElasticPyProxy using agents</h2>

<p>The aim of this project is to implement an auto <strong>registration/de-registration</strong> process which
will allow backend hosts to get automatically registered or deregistered with <a href="https://github.com/LazyWolves/ElasticPyProxy/">ElasticPyProxy</a></p>

<p>ElasticPyProxy is a system for flexible management of HAProxy backends which can autoscale. It allows dynamic
addition and removal of autoscaled backends from HAProxy without restart/reload of HAProxy. More details can be
found in the documentation of the project.</p>

<p>Till now, the backend discovery, registration and de-registration happens in a centralised manner. The host/server
running ElaticPProxy is responsible for discovering the live target backends and reister them with HAProxy and at the
same time, discover dead, state backends and remove them from HAProxy. The primary objective of this project
is to convert this centralised system to an agent based system.</p>

<p>An agent will run on every backend. Whenever a new backend comes up, the agent should fire a registration api call
to the ElasticPyProxy instance with whom it wants to register itself. Once the call is successfull, the  EP2 instance should register the respective host with itself and make it live.</p>

<p>Similar to registration API call there should also be a de-registration or self-removal API call. When an agent
from a backend will hit this API call, the EP2 instance should remove this host from the active backend pool.
Since backends can be ephimeral, this will be necessary when a backend server is going down (may be a scale down
activity).</p>

<p>Both the registration and removal API calls should be compatible with ```update_by_runtime<code class="highlighter-rouge">and</code>update_by_reload``
methods of backend addition.</p>

<p>As far as the agent is concerned, it can be a separate standalone application altogether, or it can be the
EP2 application itself which will be given the capability to run in agent mode. This part can be taken up
by the student to decide and discuss with the mentor.</p>

<h2 id="expected-outcomes">Expected outcomes</h2>

<p>An EP2 agent for registration and removal of hosts from EP2.
Proper test suite for the same.</p>

:ET